/*
 * lunix-chrdev.c
 *
 * Implementation of character devices
 * for Lunix:TNG
 *
 * < Dimitrakopoulos Dimitrios - Roumpies Nikolaos >
 *
 */

#include <linux/mm.h>
#include <linux/fs.h>
#include <linux/init.h>
#include <linux/list.h>
#include <linux/cdev.h>
#include <linux/poll.h>
#include <linux/slab.h>
#include <linux/sched.h>
#include <linux/ioctl.h>
#include <linux/types.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/mmzone.h>
#include <linux/vmalloc.h>
#include <linux/spinlock.h>

#include "lunix.h"
#include "lunix-chrdev.h"
#include "lunix-lookup.h"


/*
 * Global data
 */
struct cdev lunix_chrdev_cdev;

/*
 * Just a quick [unlocked] check to see if the cached
 * chrdev state needs to be updated from sensor measurements.
 */
/*
 * Declare a prototype so we can define the "unused" attribute and keep
 * the compiler happy. This function is not yet used, because this helpcode
 * is a stub.
 */
static int __attribute__((unused)) lunix_chrdev_state_needs_refresh(struct lunix_chrdev_state_struct *);
static int lunix_chrdev_state_needs_refresh(struct lunix_chrdev_state_struct *state)
{
	struct lunix_sensor_struct *sensor;
	WARN_ON ( !(sensor = state->sensor));
	if(sensor->msr_data[state->type]->last_update > state->buf_timestamp)
	{
		debug("I need refreshing\n");
		return(1);//if last update happend later than the last return 1 
	}	
	debug("Im good\n");
	return 0; //else 0
}

/*
 * Updates the cached state of a character device
 * based on sensor data. Must be called with the
 * character device state lock held.
 */
static int lunix_chrdev_state_update(struct lunix_chrdev_state_struct *state)
{
    unsigned long flags;
    struct lunix_sensor_struct *sensor;
    uint16_t raw_data;
    uint32_t time;
    long measurement;
    char new_buf_data[LUNIX_CHRDEV_BUFSZ]; // Temporary buffer for comparison

    debug("entering\n");
    sensor = state->sensor;

    /*
     * Grab the raw data quickly, hold the
     * spinlock for as little as possible.
     */
    spin_lock_irqsave(&sensor->lock, flags);
    raw_data = sensor->msr_data[state->type]->values[0];
    time = sensor->msr_data[state->type]->last_update;
    spin_unlock_irqrestore(&sensor->lock, flags);

    /*
     * Now we can take our time to format them,
     * holding only the private state semaphore.
     */
    if (lunix_chrdev_state_needs_refresh(state)) {
        switch (state->type) {
        case BATT:
            measurement = lookup_voltage[raw_data];
            break;
        case TEMP:
            measurement = lookup_temperature[raw_data];
            break;
        case LIGHT:
            measurement = lookup_light[raw_data];
            break;
        default:
            return -EINVAL;
        }

        /* Format the new data into the temporary buffer */
        snprintf(new_buf_data, LUNIX_CHRDEV_BUFSZ, " %ld.%03ld\n", 
                 measurement / 1000, measurement % 1000);

        /* Compare with the previous data to determine if it's different */
        if (strcmp(new_buf_data, state->buf_data) != 0) {
            /* Update the previous buffer with the current data */
            memcpy(state->prev_buf_data, state->buf_data, LUNIX_CHRDEV_BUFSZ);

            /* Copy the new data into the current buffer */
            memcpy(state->buf_data, new_buf_data, LUNIX_CHRDEV_BUFSZ);
            state->buf_lim = strlen(new_buf_data);
            state->buf_timestamp = time;
        } else {
            debug("Data is unchanged, skipping update\n");
            return -EAGAIN;
        }
    } else {
        debug("No refresh needed\n");
        return -EAGAIN;
    }
    debug("leaving\n");
    return 0;
}


/*************************************
 * Implementation of file operations
 * for the Lunix character device
 *************************************/

static int lunix_chrdev_open(struct inode *inode, struct file *filp)
{
    /* Declarations */
    struct lunix_chrdev_state_struct *state;
    int ret;
    unsigned int min_num, sensor_num;

    debug("entering\n");
    ret = -ENODEV;
    if ((ret = nonseekable_open(inode, filp)) < 0) {
        goto out;
    }

    /* Allocate and initialize state structure */
    state = kmalloc(sizeof(*state), GFP_KERNEL);
    if (!state) {
        debug("Memory allocation failed\n");
        ret = -ENOMEM;
        goto out;
    }

    /* Associate with sensor based on minor number */
    min_num = iminor(inode);
    sensor_num = min_num >> 3;
    state->sensor = &lunix_sensors[sensor_num]; 
    min_num = min_num & 0x07;
    state->type = min_num;

    /* Initialize state fields */
    state->buf_timestamp = 0;
    state->buf_lim = 0;
    memset(state->buf_data, 0, LUNIX_CHRDEV_BUFSZ);
    memset(state->prev_buf_data, 0, LUNIX_CHRDEV_BUFSZ); // Initialize previous buffer

    sema_init(&state->lock, 1);

    /* Attach state to file */
    filp->private_data = state;
    ret = 0;
out:
    debug("leaving, with ret = %d\n", ret);
    return ret;
}


static int lunix_chrdev_release(struct inode *inode, struct file *filp)
{
	kfree(filp->private_data);//private data points to each state so probably works
	//lunix_chrdev_destroy();	
	return 0;
}

static long lunix_chrdev_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
{
	return -EINVAL;
}


static ssize_t lunix_chrdev_read(struct file *filp, char __user *usrbuf, size_t cnt, loff_t *f_pos)
{
    ssize_t ret;
    struct lunix_sensor_struct *sensor;
    struct lunix_chrdev_state_struct *state;

    state = filp->private_data;
    WARN_ON(!state);

    sensor = state->sensor;
    WARN_ON(!sensor);

    /* Acquire the semaphore lock */
    if (down_interruptible(&state->lock)) {
        return -ERESTARTSYS; // Allow interruption by signals
    }

    /* Update the cached state if at the start of a new read */
    if (*f_pos == 0) {
        while (lunix_chrdev_state_update(state) == -EAGAIN) {
            /* Release the lock before sleeping */
            up(&state->lock);

            /* Handle non-blocking mode */
            if (filp->f_flags & O_NONBLOCK)
                return -EAGAIN;

            /* Wait for sensor data to become available */
            if (wait_event_interruptible(sensor->wq, lunix_chrdev_state_needs_refresh(state))) {
                return -ERESTARTSYS; // Interrupted by a signal
            }

            /* Reacquire the lock after waking up */
            if (down_interruptible(&state->lock)) {
                return -ERESTARTSYS;
            }
        }
    }

    /* Limit the read size to the remaining data */
    cnt = min(cnt, (size_t)(state->buf_lim - *f_pos));

    /* End of file */
    ret = cnt;

    /* Copy data to user space */
    if (copy_to_user(usrbuf, state->buf_data + *f_pos, cnt)) {
        ret = -EFAULT;
        goto out;
    }

    /* Update the file offset or reset on EOF */
    if (cnt == state->buf_lim) {
        *f_pos = 0;
    } else {
        *f_pos += cnt;
    }

out:
    /* Release the semaphore lock */
    up(&state->lock);
    return ret;
}


static int lunix_chrdev_mmap(struct file *filp, struct vm_area_struct *vma)
{
	return -EINVAL;
}

static struct file_operations lunix_chrdev_fops = 
{
	.owner          = THIS_MODULE,
	.open           = lunix_chrdev_open,
	.release        = lunix_chrdev_release,
	.read           = lunix_chrdev_read,
	.unlocked_ioctl = lunix_chrdev_ioctl,
	.mmap           = lunix_chrdev_mmap
};

int lunix_chrdev_init(void)
{
	/*
	 * Register the character device with the kernel, asking for
	 * a range of minor numbers (number of sensors * 8 measurements / sensor)
	 * beginning with LINUX_CHRDEV_MAJOR:0
	 */ 
	//struct lunix_sensor_struct *s;
	int ret;
	dev_t dev_no;
	unsigned int lunix_minor_cnt = lunix_sensor_cnt << 3;

	debug("initializing character device\n");
	cdev_init(&lunix_chrdev_cdev, &lunix_chrdev_fops);
	lunix_chrdev_cdev.owner = THIS_MODULE;
	
	dev_no = MKDEV(LUNIX_CHRDEV_MAJOR, 0);
	
	/* register_chrdev_region */
	ret = register_chrdev_region(dev_no, lunix_minor_cnt, "lunix");
	if (ret < 0) {
		debug("failed to register region, ret = %d\n", ret);
		goto out;
	}
	
	/* cdev_add. Adding char device to kernel*/
	ret = cdev_add(&lunix_chrdev_cdev, dev_no, lunix_minor_cnt);
	if (ret < 0) {
		debug("failed to add character device\n");
		goto out_with_chrdev_region;
	}
	debug("completed successfully\n");
	return 0;

out_with_chrdev_region:
	unregister_chrdev_region(dev_no, lunix_minor_cnt);
out:
	return ret;
}

void lunix_chrdev_destroy(void)
{
	dev_t dev_no;
	unsigned int lunix_minor_cnt = lunix_sensor_cnt << 3;

	debug("entering\n");
	dev_no = MKDEV(LUNIX_CHRDEV_MAJOR, 0);
	cdev_del(&lunix_chrdev_cdev);
	unregister_chrdev_region(dev_no, lunix_minor_cnt);
	debug("leaving\n");
}
