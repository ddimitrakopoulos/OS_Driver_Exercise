static int lunix_chrdev_open(struct inode *inode, struct file *filp)
{
	/* Declarations */
	struct lunix_chrdev_state_struct *state;
	int ret;
	unsigned int min_num, sensor_num;

	debug("entering\n");
	ret = -ENODEV;
	if ((ret = nonseekable_open(inode, filp)) < 0)
		goto out;

	state = kmalloc(sizeof(struct state), GFP_KERNEL);
	if (!state) 
	{
    		debug("Memory allocation failed\n");
    		ret= -ENOMEM;
		goto out
	}
	/*
	 * Associate this open file with the relevant sensor based on
	 * the minor number of the device node [/dev/sensor<NO>-<TYPE>]
	 */
	min_num = iminor(inode);
	sensor_num = min_num >> 3;
	state->sensors = &lunix_sensors[min_num]; 
	min_num = min_num & 0x07;
	state->type = min_num;	
	
	state->buf_timestamp = 0;

	memset(&state->buf_data,0,20);

	sema_init(&state->lock,1);
	/* Allocate a new Lunix character device private state structure */
	flip->private_data = state;
	ret = 0;
out:
	debug("leaving, with ret = %d\n", ret);
	return ret;
}
